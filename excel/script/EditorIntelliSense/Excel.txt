declare module Excel {
    class Application extends OfficeExtension.ClientObject {
        private m_calculationMode;
        public calculationMode : string;
        public calculate(calculationType: string): void;
        public handleResult(value: any): void;
    }
    class Workbook extends OfficeExtension.ClientObject {
        private m_application;
        private m_names;
        private m_tables;
        private m_worksheets;
        public application : Application;
        public names : NamedItemCollection;
        public tables : TableCollection;
        public worksheets : WorksheetCollection;
    }
    class Worksheet extends OfficeExtension.ClientObject {
        private m_charts;
        private m_id;
        private m_name;
        public charts : ChartCollection;
        public id : string;
        public name : string;
        public deleteObject(): void;
        public getCell(row: number, column: number): Range;
        public getEntireSheetRange(): Range;
        public getRange(address: string): Range;
        public getUsedRange(): Range;
        public handleResult(value: any): void;
    }
    class WorksheetCollection extends OfficeExtension.ClientObject {
        private m_count;
        private m__items;
        public items : Worksheet[];
        public count : number;
        public add(name: string): Worksheet;
        public getItem(index: string): Worksheet;
        public getItemAt(index: number): Worksheet;
        public handleResult(value: any): void;
    }
    class Range extends OfficeExtension.ClientObject {
        private m_address;
        private m_addressLocal;
        private m_cellCount;
        private m_columnCount;
        private m_columnIndex;
        private m_format;
        private m_formulas;
        private m_formulasLocal;
        private m_numberFormat;
        private m_rowCount;
        private m_rowIndex;
        private m_text;
        private m_values;
        public format : Format;
        public address : string;
        public addressLocal : string;
        public cellCount : number;
        public columnCount : number;
        public columnIndex : number;
        public formulas : any[][];
        public formulasLocal : any[][];
        public numberFormat : any[][];
        public rowCount : number;
        public rowIndex : number;
        public text : any[][];
        public values : any;
        public clear(applyTo: string): void;
        public delete(shift: string): void;
        public getCell(row: number, column: number): Range;
        public getEntireColumn(): Range;
        public getEntireRow(): Range;
        public getUsedRange(): Range;
        public insert(shift: string): void;
        public handleResult(value: any): void;
    }
    class NamedItemCollection extends OfficeExtension.ClientObject {
        public getItem(index: any): NamedItem;
    }
    class NamedItem extends OfficeExtension.ClientObject {
        private m_name;
        private m_type;
        private m_value;
        private m_visible;
        public name : string;
        public type : string;
        public value : any;
        public visible : boolean;
        public getRange(): Range;
        public handleResult(value: any): void;
    }
    class TableCollection extends OfficeExtension.ClientObject {
        private m_count;
        private m__items;
        public items : Table[];
        public count : number;
        public add(name: string, address: string, showHeaders: boolean, showTotals: boolean, tableStyle: string): Table;
        public getItem(id: any): Table;
        public getItemAt(index: number): Table;
        public handleResult(value: any): void;
    }
    class Table extends OfficeExtension.ClientObject {
        private m_id;
        private m_name;
        private m_showHeaders;
        private m_showTotals;
        private m_tableColumns;
        private m_tableRows;
        private m_tableStyle;
        public tableColumns : TableColumnCollection;
        public tableRows : TableRowCollection;
        public id : number;
        public name : string;
        public showHeaders : boolean;
        public showTotals : boolean;
        public tableStyle : string;
        public deleteObject(): void;
        public getDataBodyRange(): Range;
        public getHeaderRowRange(): Range;
        public getRange(): Range;
        public getTotalRowRange(): Range;
        public handleResult(value: any): void;
    }
    class TableColumnCollection extends OfficeExtension.ClientObject {
        private m_count;
        private m__items;
        public items : TableColumn[];
        public count : number;
        /**
            Add a new item to the collection, at index
        */
        public add(index: any, values: any): TableColumn;
        public getItem(id: any): TableColumn;
        public getItemAt(index: number): TableColumn;
        public handleResult(value: any): void;
    }
    class TableColumn extends OfficeExtension.ClientObject {
        private m_id;
        private m_index;
        private m_name;
        private m_values;
        public id : number;
        public index : number;
        public name : string;
        public values : any[][];
        public deleteObject(): void;
        public getDataBodyRange(): Range;
        public getHeaderRowRange(): Range;
        public getRange(): Range;
        public getTotalRowRange(): Range;
        public handleResult(value: any): void;
    }
    class TableRowCollection extends OfficeExtension.ClientObject {
        private m_count;
        private m__items;
        public items : TableRow[];
        public count : number;
        public add(index: any, values: any): TableRow;
        public getItemAt(index: number): TableRow;
        public handleResult(value: any): void;
    }
    class TableRow extends OfficeExtension.ClientObject {
        private m_index;
        private m_values;
        public index : number;
        public values : any[][];
        public deleteObject(): void;
        public getRange(): Range;
        public handleResult(value: any): void;
    }
    class Format extends OfficeExtension.ClientObject {
        private m_background;
        private m_borders;
        private m_font;
        private m_horizontalAlignment;
        private m_verticalAlignment;
        private m_wrapText;
        public background : Background;
        public borders : BorderCollection;
        public font : Font;
        public horizontalAlignment : string;
        public verticalAlignment : string;
        public wrapText : any;
        public handleResult(value: any): void;
    }
    class Background extends OfficeExtension.ClientObject {
        private m_color;
        public color : string;
        public handleResult(value: any): void;
    }
    class Border extends OfficeExtension.ClientObject {
        private m_color;
        private m_lineStyle;
        private m_sideIndex;
        private m_weight;
        public color : string;
        public lineStyle : string;
        public sideIndex : string;
        public weight : string;
        public handleResult(value: any): void;
    }
    class BorderCollection extends OfficeExtension.ClientObject {
        public getItem(index: string): Border;
    }
    class Font extends OfficeExtension.ClientObject {
        private m_bold;
        private m_color;
        private m_italic;
        private m_name;
        private m_size;
        private m_underline;
        public bold : any;
        public color : string;
        public italic : any;
        public name : string;
        public size : any;
        public underline : string;
        public handleResult(value: any): void;
    }
    class ChartCollection extends OfficeExtension.ClientObject {
        private m_count;
        private m__items;
        public items : Chart[];
        public count : number;
        public add(type: string, sourceData: any, seriesBy: string): Chart;
        public getItem(id: any): Chart;
        public getItemAt(index: number): Chart;
        public handleResult(value: any): void;
    }
    class Chart extends OfficeExtension.ClientObject {
        private m_colorScheme;
        private m_dataLabels;
        private m_format;
        private m_height;
        private m_id;
        private m_left;
        private m_legend;
        private m_name;
        private m_title;
        private m_top;
        private m_width;
        public dataLabels : ChartDataLabels;
        public format : ShapeFormat;
        public legend : ChartLegend;
        public title : ChartTitle;
        public colorScheme : number;
        public height : number;
        public id : string;
        public left : number;
        public name : string;
        public top : number;
        public width : number;
        public deleteObject(): void;
        public exportAsImage(): OfficeExtension.ClientResult<string>;
        public setData(sourceData: any, seriesBy: string): void;
        public handleResult(value: any): void;
    }
    class ChartDataLabels extends OfficeExtension.ClientObject {
        private m_format;
        private m_position;
        private m_separator;
        private m_showBubbleSize;
        private m_showCategoryName;
        private m_showLegendKey;
        private m_showPercentage;
        private m_showSeriesName;
        private m_showValue;
        public format : ShapeFormat;
        public position : string;
        public separator : string;
        public showBubbleSize : boolean;
        public showCategoryName : boolean;
        public showLegendKey : boolean;
        public showPercentage : boolean;
        public showSeriesName : boolean;
        public showValue : boolean;
        public handleResult(value: any): void;
    }
    class ChartLegend extends OfficeExtension.ClientObject {
        private m_format;
        private m_overlay;
        private m_position;
        public format : ShapeFormat;
        public overlay : boolean;
        public position : string;
        public handleResult(value: any): void;
    }
    class ChartTitle extends OfficeExtension.ClientObject {
        private m_format;
        private m_overlay;
        private m_position;
        private m_text;
        public format : ShapeFormat;
        public overlay : boolean;
        public position : string;
        public text : string;
        public handleResult(value: any): void;
    }
    class ShapeFill extends OfficeExtension.ClientObject {
        private m_solidColor;
        public solidColor : string;
        public handleResult(value: any): void;
    }
    class ShapeFont extends OfficeExtension.ClientObject {
        private m_bold;
        private m_color;
        private m_italic;
        private m_name;
        private m_size;
        private m_underline;
        public bold : boolean;
        public color : string;
        public italic : boolean;
        public name : string;
        public size : number;
        public underline : boolean;
        public handleResult(value: any): void;
    }
    class ShapeFormat extends OfficeExtension.ClientObject {
        private m_fill;
        private m_font;
        public fill : ShapeFill;
        public font : ShapeFont;
    }
    class BorderIndex {
        static none: string;
        static edgeTop: string;
        static edgeBottom: string;
        static edgeLeft: string;
        static edgeRight: string;
        static insideVertical: string;
        static insideHorizontal: string;
        static diagonalDown: string;
        static diagonalUp: string;
    }
    class CalculationMode {
        static automatic: string;
        static automaticExceptTables: string;
        static manual: string;
    }
    class CalculationType {
        static recalculate: string;
        static full: string;
        static fullRebuild: string;
    }
    class ClearApplyTo {
        static all: string;
        static formats: string;
        static contents: string;
    }
    class ChartDataLabelPosition {
        static invalid: string;
        static none: string;
        static center: string;
        static insideEnd: string;
        static insideBase: string;
        static outsideEnd: string;
        static left: string;
        static right: string;
        static top: string;
        static bottom: string;
        static bestFit: string;
        static callout: string;
    }
    class ChartLegendPosition {
        static invalid: string;
        static none: string;
        static top: string;
        static bottom: string;
        static left: string;
        static right: string;
    }
    class ChartSeriesBy {
        static invalid: string;
        static auto: string;
        static columns: string;
        static rows: string;
    }
    class ChartTitlePosition {
        static invalid: string;
        static none: string;
        static top: string;
    }
    class ChartType {
        static invalid: string;
        static columnClustered: string;
        static columnStacked: string;
        static columnStacked100: string;
        static _3DColumnClustered: string;
        static _3DColumnStacked: string;
        static _3DColumnStacked100: string;
        static barClustered: string;
        static barStacked: string;
        static barStacked100: string;
        static _3DBarClustered: string;
        static _3DBarStacked: string;
        static _3DBarStacked100: string;
        static lineStacked: string;
        static lineStacked100: string;
        static lineMarkers: string;
        static lineMarkersStacked: string;
        static lineMarkersStacked100: string;
        static pieOfPie: string;
        static pieExploded: string;
        static _3DPieExploded: string;
        static barOfPie: string;
        static xyscatterSmooth: string;
        static xyscatterSmoothNoMarkers: string;
        static xyscatterLines: string;
        static xyscatterLinesNoMarkers: string;
        static areaStacked: string;
        static areaStacked100: string;
        static _3DAreaStacked: string;
        static _3DAreaStacked100: string;
        static doughnutExploded: string;
        static radarMarkers: string;
        static radarFilled: string;
        static surface: string;
        static surfaceWireframe: string;
        static surfaceTopView: string;
        static surfaceTopViewWireframe: string;
        static bubble: string;
        static bubble3DEffect: string;
        static stockHLC: string;
        static stockOHLC: string;
        static stockVHLC: string;
        static stockVOHLC: string;
        static cylinderColClustered: string;
        static cylinderColStacked: string;
        static cylinderColStacked100: string;
        static cylinderBarClustered: string;
        static cylinderBarStacked: string;
        static cylinderBarStacked100: string;
        static cylinderCol: string;
        static coneColClustered: string;
        static coneColStacked: string;
        static coneColStacked100: string;
        static coneBarClustered: string;
        static coneBarStacked: string;
        static coneBarStacked100: string;
        static coneCol: string;
        static pyramidColClustered: string;
        static pyramidColStacked: string;
        static pyramidColStacked100: string;
        static pyramidBarClustered: string;
        static pyramidBarStacked: string;
        static pyramidBarStacked100: string;
        static pyramidCol: string;
        static _3DColumn: string;
        static line: string;
        static _3DLine: string;
        static _3DPie: string;
        static pie: string;
        static xyscatter: string;
        static _3DArea: string;
        static area: string;
        static doughnut: string;
        static radar: string;
    }
    class DeleteShiftDirection {
        static up: string;
        static left: string;
    }
    class InsertShiftDirection {
        static down: string;
        static right: string;
    }
}
declare module Excel {
    class ExcelClientContext extends OfficeExtension.ClientRequestContext {
        private m_workbook;
        constructor(url?: string);
        public workbook : Workbook;
    }
}
